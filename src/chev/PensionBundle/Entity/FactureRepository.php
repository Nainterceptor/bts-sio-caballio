<?php

namespace chev\PensionBundle\Entity;

use Doctrine\ORM\EntityRepository, 
    Doctrine\ORM\Query;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends EntityRepository
{
	private function retourneFacture($facture) {
		$intervalDates = $facture[1]['facture']->getDateDebut()->diff($facture[1]['facture']->getDateFin(), true);
        $intervalJours = $intervalDates->days;
		if ($intervalJours > 0 && $intervalJours != 0) {
			if ($intervalJours > 31) {
				$nbMois = round($intervalJours/30, 0, PHP_ROUND_HALF_UP);
			}
			else {
				$nbMois = 1;
			}
			$facture['nbJours'] = $intervalJours;
			$facture['montant'] = $nbMois*$facture[1]['prix'];
        	return $facture;
		}
		else {
			$facture['nbJours'] = $intervalJours;
			$facture['montant'] = "Erreur sur le Bail";
			return $facture;
		}
	}
	/**
     * Trouver toutes les factures par le centre ayant ce gérant
     * 
     * @param User $gerant Le gérant
     *
     * @return Tableau d'entités
     */
    public function findByCentreGerant($gerant) {
        return $this->_em
                ->createQuery('SELECT f FROM chevPensionBundle:Facture f
                               JOIN f.box b 
                               JOIN b.type t
                               JOIN t.centre c
                               WHERE c.gerant = :gerant')
                ->setParameter(':gerant', $gerant)
                ->getResult();
    }
	/**
     * Trouver une facture par le centre ayant ce gérant
     * 
     * @param User $gerant Le gérant
     *
     * @return Tableau d'entités
     */
    public function findOneByCentreGerant($gerant, $id) {
        return $this->_em
                ->createQuery('SELECT f FROM chevPensionBundle:Facture f
                               JOIN f.box b 
                               JOIN b.type t
                               JOIN t.centre c
                               WHERE c.gerant = :gerant
                               AND f.id = :id')
                ->setParameter(':gerant', $gerant)
                ->setParameter(':id', $id)
                ->getOneOrNullResult();
    }
	/**
     * Trouver une facture avec le montant par l'id
     * 
     * @param User $gerant Le gérant
     * @param int $id l'id
     * 
     * @return Entity
     */
    public function findAM($id) {
    	try {
    		$em = $this->getEntityManager();
            $query = 'SELECT f AS facture, t.prix, p AS paiements'
                   . ' FROM chevPensionBundle:Paiement p, chevPensionBundle:Facture f'
                   . ' JOIN f.box b'
                   . ' JOIN b.type t'
                   . ' WHERE f.id = :id'
				   . ' AND p.facture = :id';
    		$facture = $em->createQuery($query)
    					  ->setParameter(':id', $id)
    					  ->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
		if($facture == null)
            return null;
        return $this->retourneFacture($facture);
    }
    /**
     * Trouver une facture avec le montant par le centre ayant ce gérant et l'id
     * 
     * @param User $gerant Le gérant
     * @param int $id l'id
     * 
     * @return Entity
     */
    public function findOneByCentreGerantAM($gerant, $id) {
    	try {
    		$em = $this->getEntityManager();
            $query = 'SELECT f AS facture, t.prix'
                   . ' FROM chevPensionBundle:Paiement p, chevPensionBundle:Facture f'
                   . ' JOIN f.box b'
                   . ' JOIN b.type t'
                   . ' JOIN t.centre c'
                   . ' WHERE c.gerant = :gerant'
                   . ' AND f.id = :id'
				   . ' AND p.facture = :id';
    		$facture = $em->createQuery($query)
						  ->setParameter(':gerant', $gerant)
    					  ->setParameter(':id', $id)
    					  ->getOneOrNullResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
		if($facture == null)
            return null;
        return $this->retourneFacture($facture);
    }
	/**
     * Trouver une facture avec le montant par l'utilisateur et l'id
     * 
     * @param User $gerant Le gérant
     * @param int $id l'id
     * 
     * @return Entity
     */
	public function findOneByUtilisateurAM($user, $id) {
    	try {
    		$em = $this->getEntityManager();
            $query = 'SELECT f AS facture, t.prix'
                   . ' FROM chevPensionBundle:Paiement p, chevPensionBundle:Facture f'
                   . ' JOIN f.box b'
                   . ' JOIN b.type t'
                   . ' WHERE f.utilisateur = :utilisateur'
                   . ' AND f.id = :id'
				   . ' AND p.facture = :id';
    		$facture = $em->createQuery($query)
						  ->setParameter(':utilisateur', $user)
    					  ->setParameter(':id', $id)
    					  ->getOneOrNullResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
		if($facture == null)
            return null;
        return $this->retourneFacture($facture);
    }
}
